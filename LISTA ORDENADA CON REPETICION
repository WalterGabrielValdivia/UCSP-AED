#include <iostream>
using namespace std;

template<typename T>
struct Node{
  T valor;
  Node *next;
  Node(T _valor, Node*_next=nullptr)
  {
    valor = _valor;
    next = _next;
  }
};

template<typename T>
class List{
public:
  Node<T>*Head;
  List(){
    Head = nullptr;
  }
  ~List(){
    for(Node<int>*t=Head;Head;t=Head)
    {
      Head = Head->next;
      delete t;
    }
      
  }
  bool find(T x, Node<T>**&p)
  {
      for(p=&Head;*p&&((*p)->valor)<x;p=&((*p)->next)){}
      return *p && (*p)->valor==x;
  }
  bool insert(T x)
  {
    Node<T>**p;
    if(find(x,p)) return 0;
    Node<T>*Aux = new Node<T>(x);
    Aux->next = *p;
    *p = Aux;
    return 1;
  }
  bool remove(T x)
  {
    Node<T>**p;
    if(!find(x,p)) return 0;
    Node<T>*t = *p;
    *p = t->next;
    delete t;
    return 1;
  }
  void print()
  {
    for(Node<T>*p=Head;p;p=p->next)
    {
     cout<<p->valor<<"->"; 
    }
    cout<<"NULL"<<endl;
  }

};
int main() { 
}
